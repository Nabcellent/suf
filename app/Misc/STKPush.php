<?php


namespace App\Misc;


use Illuminate\Http\Request;

class STKPush extends MpesaValidator {
    private $passKey;
    private $shortCode;
    private $amount;
    private $partyA;        //  Sender Phone NUmber
    private $partyB;        //  Receiving Short Code
    private $phoneNumber;   //  Payer Phone(person paying)
    private $callbackUrl;
    private $accountReference;
    private string $transactionType = "CustomerPaybillOnline";
    private $remarks;

    private bool $fail = false;
    private string $response = "An unknown error occurred.";

    protected $default_endpoints = [
        'live' => 'https://api.safaricom.co.ke/mpesa/stkpush/v1/processrequest',
        'sandbox' => 'https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest'
    ];

    /**
     * Use this function to initiate an STKPush Simulation
     * @param $BusinessShortCode | The organization shortcode used to receive the transaction.
     * @param $LipaNaMpesaPasskey | The password for encrypting the request. This is generated by base64 encoding BusinessShortcode, Passkey and Timestamp.
     * @param $TransactionType | The transaction type to be used for this request. Only CustomerPayBillOnline is supported.
     * @param $Amount | The amount to be transacted.
     * @param $PartyA | The MSISDN sending the funds.
     * @param $PartyB | The organization shortcode receiving the funds
     * @param $PhoneNumber | The MSISDN sending the funds.
     * @param $CallBackURL | The url to where responses from M-Pesa will be sent to.
     * @param $AccountReference | Used with M-Pesa PayBills.
     * @param $TransactionDesc | A description of the transaction.
     * @param $Remark | Remarks
     * @return mixed|string
     */
    public function simulate(string $env) {
        try {
            $this -> validateEndpoints($env);
            $token = (new TokenGenerator()) -> generateToken($env);
        } catch(\Exception $e) {
            $this->fail = true;
            $this->response = $e->getMessage();
        }

        $timestamp='20'.date(    "ymdhis");
        $password=base64_encode($this->shortCode.$this->passKey.$timestamp);

        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $this->endpoint);
        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type:application/json','Authorization:Bearer '.$token));


        $curl_post_data = array(
            'BusinessShortCode' => $this->shortCode,
            'Password' => $password,
            'Timestamp' => $timestamp,
            'TransactionType' => $this->transactionType,
            'Amount' => $this->amount,
            'PartyA' => $this->partyA,
            'PartyB' => $this->partyB,
            'PhoneNumber' => $this->phoneNumber,
            'CallBackURL' => $this->callbackUrl,
            'AccountReference' => $this->accountReference,
            'TransactionDesc' => $this->remarks
        );

        $data_string = json_encode($curl_post_data);

        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_POST, true);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);
        curl_setopt($curl, CURLOPT_HEADER, false);

        $this->response = json_decode(curl_exec($curl));

        return $this;
    }

    public function confirm(Request $request) {
        $payLoad = json_decode($request -> getContent(), true, 512, JSON_THROW_ON_ERROR);

        if(property_exists($payLoad, 'body') && $payLoad->Body->stkCallback->ResultCode === 0) {
            $merchantRequestID = $payLoad->Body->stkCallback->MerchantRequestID;
            $checkoutRequestID = $payLoad->Body->stkCallback->CheckoutRequestID;

            $stkPushModel = \App\Models\StkPush::where([
                'merchant_request_id' => $merchantRequestID,
                'checkout_request_id' => $checkoutRequestID,
            ])->first();

            $data = [
                'result_desc' => $payLoad->Body->stkCallback->ResultCode,
                'result_code' => $payLoad->Body->stkCallback->ResultDesc,
                'merchant_request_id' => $merchantRequestID,
                'checkout_request_id' => $checkoutRequestID,
                'amount' =>$payLoad->stkCallback->Body->CallbackMetadata->Item[0]->Value,
                'mpesa_receipt_number' => $payLoad->Body->stkCallback->CallbackMetadata->Item[1]->Value,
                //'b2c_utility_account_available_funds' => $payLoad->Body->stkCallback->CallbackMetadata->Item[3]->Value,
                'transaction_date' => $payLoad->Body->stkCallback->CallbackMetadata->Item[4]->Value,
                'phone_number' => $payLoad->Body->stkCallback->CallbackMetadata->Item[5]->Value,
            ];

            if($stkPushModel) {
                $stkPushModel->fill($data)->save();
            } else {
                \App\Models\StkPush::create($data);
            }
        } else {
            $this->fail = true;
        }

        return $this;
    }

    /**
     * @param mixed $shortCode
     */
    public function setShortCode($shortCode) {
        $this -> shortCode = $shortCode;

        return $this;
    }

    /**
     * @param mixed $passKey
     */
    public function setPassKey($passKey) {
        $this -> passKey = $passKey;

        return $this;
    }

    /**
     * @param mixed $amount
     */
    public function setAmount($amount) {
        $this -> amount = $amount;

        return $this;
    }

    /**
     * @param mixed $partyA
     */
    public function setPartyA($partyA) {
        $this -> partyA = $partyA;

        return $this;
    }

    /**
     * @param mixed $partyB
     */
    public function setPartyB($partyB) {
        $this -> partyB = $partyB;

        return $this;
    }

    /**
     * @param mixed $phoneNumber
     */
    public function setPhoneNumber($phoneNumber) {
        $this -> phoneNumber = $phoneNumber;

        return $this;
    }

    /**
     * @param mixed $callbackUrl
     */
    public function setCallbackUrl($callbackUrl) {
        $this -> callbackUrl = $callbackUrl;

        return $this;
    }

    /**
     * @param mixed $accountReference
     */
    public function setAccountReference($accountReference) {
        $this -> accountReference = $accountReference;

        return $this;
    }

    /**
     * @param string $transactionType
     */
    public function setTransactionType(string $transactionType) {
        $this -> transactionType = $transactionType;

        return $this;
    }

    /**
     * @param mixed $remarks
     */
    public function setRemarks($remarks) {
        $this -> remarks = $remarks;

        return $this;
    }

    public function failed(): bool {
        return $this->fail;
    }

    public function getResponse(): string {
        return $this->response;
    }
}
